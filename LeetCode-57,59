class Solution {
/*
57.插入区间
给你一个 无重叠的 ，按照区间起始端点排序的区间列表 intervals，其中 intervals[i] = [starti, endi] 表示第 i 个区间的开始和结束，并且 intervals 按照 starti 升序排列。同样给定一个区间 newInterval = [start, end] 表示另一个区间的开始和结束。
在 intervals 中插入区间 newInterval，使得 intervals 依然按照 starti 升序排列，且区间之间不重叠（如果有必要的话，可以合并区间）。
返回插入之后的 intervals。
注意 你不需要原地修改 intervals。你可以创建一个新数组然后返回它。
*/
  public int[][] insert(int[][] intervals, int[] newInterval) {
    int left = newInterval[0];
    int right = newInterval[1];
    boolean placed = false;
    List<int[]> ansList = new ArrayList<>();
    for(int[] interval : intervals) {
      if(interval[0] > right) {
        if(!placed) {
          ansList.add(new int[] {left, right});
          placed = true;
        } 
        ansList.add(interval);
      } else if(interval[1] < left) {
          ansList.add(interval);
      } else {
          left = Math.min(left, interval[0]);
          right = Math.max(right, interval[1]);
      }
    }
    if(!placed) {
      ansList.add(new int[]{left, right});
    }
    int[][] ans = new int[ansList.size()][2];
    for(int i = 0; i < ansList.size(); i++) {
      ans[i] = ansList.get(i);
    }
    return ans;
  }
/*
59.螺旋矩阵II
给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。
*/
  public int[][] generateMatrix(int n) {
    int[][] mat = new int[n][n];
    int l = 0, r = n - 1, t = 0, b = n - 1;
    int total = n * n;
    int num = 1;
    while(num <= total) {
      for(int i = l; i <= r; i++) {
        mat[t][i] = num++;
      }
      t++;
      for(int i = t; i <= b; i++) {
        mat[i][r] = num++;
      }
      r--;
      for(int i = r; i >= l; i--) {
        mat[b][i] = num++;
      }
      b--;
      for(int i = b; i >= t; i--) {
        mat[i][l] = num++;
      }
      l++;
    }
    return mat;
  }
}
